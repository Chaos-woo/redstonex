// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:example/homepage/network_tools/history_weather_query/models/city_history_weather.dart';
import 'package:example/services/models/bili_hot_video.dart';
import 'package:example/services/models/bili_hot_video_recommend_reason.dart';
import 'package:example/services/models/bili_hot_video_stat.dart';
import 'package:example/services/models/bili_up.dart';
import 'package:example/services/models/city.dart';
import 'package:example/services/models/paging_bili_hot_video.dart';
import 'package:example/services/models/province.dart';
import 'package:example/services/models/province_with_city.dart';

JsonConvert jsonConvert = JsonConvert();
typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);

class JsonConvert {
	static final Map<String, JsonConvertFunction> convertFuncMap = {
		(CityHistoryWeather).toString(): CityHistoryWeather.fromJson,
		(BiliHotVideo).toString(): BiliHotVideo.fromJson,
		(BiliHotVideoRecommendReason).toString(): BiliHotVideoRecommendReason.fromJson,
		(BiliHotVideoStat).toString(): BiliHotVideoStat.fromJson,
		(BiliUp).toString(): BiliUp.fromJson,
		(City).toString(): City.fromJson,
		(PagingBiliHotVideo).toString(): PagingBiliHotVideo.fromJson,
		(Province).toString(): Province.fromJson,
		(ProvinceWithCity).toString(): ProvinceWithCity.fromJson,
		(WithCity).toString(): WithCity.fromJson,
	};

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e,enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        return convertFuncMap[type]!(Map<String, dynamic>.from(value)) as T;
      } else {
        throw UnimplementedError('$type unimplemented');
      }
    }
  }

	//list is returned by type
	static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
		if(<CityHistoryWeather>[] is M){
			return data.map<CityHistoryWeather>((Map<String, dynamic> e) => CityHistoryWeather.fromJson(e)).toList() as M;
		}
		if(<BiliHotVideo>[] is M){
			return data.map<BiliHotVideo>((Map<String, dynamic> e) => BiliHotVideo.fromJson(e)).toList() as M;
		}
		if(<BiliHotVideoRecommendReason>[] is M){
			return data.map<BiliHotVideoRecommendReason>((Map<String, dynamic> e) => BiliHotVideoRecommendReason.fromJson(e)).toList() as M;
		}
		if(<BiliHotVideoStat>[] is M){
			return data.map<BiliHotVideoStat>((Map<String, dynamic> e) => BiliHotVideoStat.fromJson(e)).toList() as M;
		}
		if(<BiliUp>[] is M){
			return data.map<BiliUp>((Map<String, dynamic> e) => BiliUp.fromJson(e)).toList() as M;
		}
		if(<City>[] is M){
			return data.map<City>((Map<String, dynamic> e) => City.fromJson(e)).toList() as M;
		}
		if(<PagingBiliHotVideo>[] is M){
			return data.map<PagingBiliHotVideo>((Map<String, dynamic> e) => PagingBiliHotVideo.fromJson(e)).toList() as M;
		}
		if(<Province>[] is M){
			return data.map<Province>((Map<String, dynamic> e) => Province.fromJson(e)).toList() as M;
		}
		if(<ProvinceWithCity>[] is M){
			return data.map<ProvinceWithCity>((Map<String, dynamic> e) => ProvinceWithCity.fromJson(e)).toList() as M;
		}
		if(<WithCity>[] is M){
			return data.map<WithCity>((Map<String, dynamic> e) => WithCity.fromJson(e)).toList() as M;
		}

		debugPrint("${M.toString()} not found");
	
		return null;
}

	static M? fromJsonAsT<M>(dynamic json) {
		if (json is List) {
			return _getListChildType<M>(json.map((e) => e as Map<String, dynamic>).toList());
		} else {
			return jsonConvert.convert<M>(json);
		}
	}
}